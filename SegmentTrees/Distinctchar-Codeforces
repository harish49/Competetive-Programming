// #pragma GCC optimize "trapv" Uncomment when dealing with huge numbers
/*<----------PBDS---------->

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
template <typename T>
using order_set = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;

order_set<datatype>oset;
Kth smallest : *oset.find_by_order(k-1); // 0 based index
No of elements less than k : oset.order_of_key(k);
Erase X : oset.erase(x)
<----------PBDS---------->*/
#include<iostream>
#include<bits/stdc++.h>
#define int long long
#define mod 1000000007
#define pb(x) push_back(x)
#define gcd(a,b) __gcd(a,b)
#define all(v) v.begin(),v.end()
#define lcm(a,b) (a*b)/gcd(a,b)
#define bits(x) __builtin_popcountll(x)
#define fast ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std;
set <int> q[26];
int n,op,x,l,r,t,len,cnt;
char s[500001]; 
char c;
int32_t main()
{
	cin>>s;
	len=strlen(s);
	for (int i=0;i<len;i++) q[s[i]-97].insert(i);
	cin>>n;
	for (int i=1;i<=n;i++){
		cin>>op;
		if (op==1){
			cin>>x>>c;
			x--;
			q[s[x]-97].erase(x);
			s[x]=c;
			q[c-97].insert(x);
		}
		if (op==2){
			cin>>l>>r;
			l--;r--;
			cnt=0;
			for (int j=0;j<=25;j++) if (*q[j].lower_bound(l)<=r&&q[j].lower_bound(l)!=q[j].end()) cnt++;
			cout<<cnt<<endl;
		}
	}
}
